[{"E:\\code5200\\mini\\client\\src\\index.js":"1","E:\\code5200\\mini\\client\\src\\App.js":"2","E:\\code5200\\mini\\client\\src\\components\\Footer.jsx":"3","E:\\code5200\\mini\\client\\src\\pages\\Login.jsx":"4","E:\\code5200\\mini\\client\\src\\pages\\Register.jsx":"5","E:\\code5200\\mini\\client\\src\\pages\\Post.jsx":"6","E:\\code5200\\mini\\client\\src\\pages\\Home.jsx":"7","E:\\code5200\\mini\\client\\src\\components\\Navbar.jsx":"8","E:\\code5200\\mini\\client\\src\\components\\Menu.jsx":"9","E:\\code5200\\mini\\client\\src\\context\\authContext.js":"10","E:\\code5200\\mini\\client\\src\\pages\\Single.jsx":"11","E:\\code5200\\mini\\client\\src\\pages\\User.jsx":"12","E:\\code5200\\mini\\client\\src\\pages\\PostUser.jsx":"13","E:\\code5200\\mini\\client\\src\\pages\\Order.jsx":"14","E:\\code5200\\mini\\client\\src\\components\\Bidding.jsx":"15","E:\\code5200\\mini\\client\\src\\pages\\Statistics.jsx":"16","E:\\code5200\\mini\\client\\src\\pages\\AdminLogin.jsx":"17","E:\\code5200\\mini\\client\\src\\pages\\DeleteUser.jsx":"18","E:\\code5200\\mini\\client\\src\\pages\\DeleteProduct.jsx":"19","E:\\code5200\\mini\\client\\src\\components\\AdminNavbar.jsx":"20","E:\\code5200\\mini\\client\\src\\components\\MixedChart.jsx":"21","E:\\code5200\\mini\\client\\src\\pages\\AdminHome.jsx":"22","E:\\code5200\\mini\\client\\src\\pages\\Chat.jsx":"23","E:\\code5200\\mini\\client\\src\\components\\DynamicTable.jsx":"24","E:\\code5200\\mini\\client\\src\\components\\msgBoard.jsx":"25"},{"size":563,"mtime":1700949134924,"results":"26","hashOfConfig":"27"},{"size":2662,"mtime":1701317904614,"results":"28","hashOfConfig":"27"},{"size":921,"mtime":1701317353370,"results":"29","hashOfConfig":"27"},{"size":1445,"mtime":1700949134925,"results":"30","hashOfConfig":"27"},{"size":2883,"mtime":1701336853354,"results":"31","hashOfConfig":"27"},{"size":9696,"mtime":1701312696518,"results":"32","hashOfConfig":"27"},{"size":6162,"mtime":1701719948669,"results":"33","hashOfConfig":"27"},{"size":2619,"mtime":1701062481488,"results":"34","hashOfConfig":"27"},{"size":1274,"mtime":1701737233532,"results":"35","hashOfConfig":"27"},{"size":1258,"mtime":1701312691294,"results":"36","hashOfConfig":"27"},{"size":8864,"mtime":1701312694950,"results":"37","hashOfConfig":"27"},{"size":8892,"mtime":1701312694322,"results":"38","hashOfConfig":"27"},{"size":3108,"mtime":1701313326828,"results":"39","hashOfConfig":"27"},{"size":9055,"mtime":1701312696963,"results":"40","hashOfConfig":"27"},{"size":6281,"mtime":1701312693265,"results":"41","hashOfConfig":"27"},{"size":1618,"mtime":1700949134925,"results":"42","hashOfConfig":"27"},{"size":1368,"mtime":1700981671038,"results":"43","hashOfConfig":"27"},{"size":1676,"mtime":1701312697441,"results":"44","hashOfConfig":"27"},{"size":1700,"mtime":1701312697910,"results":"45","hashOfConfig":"27"},{"size":1380,"mtime":1701316264197,"results":"46","hashOfConfig":"27"},{"size":2321,"mtime":1701326569297,"results":"47","hashOfConfig":"27"},{"size":8544,"mtime":1701312690765,"results":"48","hashOfConfig":"27"},{"size":2534,"mtime":1701313769747,"results":"49","hashOfConfig":"27"},{"size":994,"mtime":1701058322233,"results":"50","hashOfConfig":"27"},{"size":7111,"mtime":1701312745271,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1evj80o",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"55"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"55"},"E:\\code5200\\mini\\client\\src\\index.js",[],[],["138","139","140","141","142","143"],"E:\\code5200\\mini\\client\\src\\App.js",["144"],[],"import { createBrowserRouter, Outlet, RouterProvider } from \"react-router-dom\";\r\nimport Register from \"./pages/Register.jsx\";\r\nimport Login from \"./pages/Login.jsx\";\r\nimport Navbar from \"./components/Navbar.jsx\";\r\nimport Home from \"./pages/Home.jsx\";\r\nimport Footer from \"./components/Footer.jsx\";\r\nimport Single from \"./pages/Single.jsx\";\r\nimport Post from \"./pages/Post.jsx\";\r\nimport Chat from \"./pages/Chat.jsx\";\r\nimport User from \"./pages/User.jsx\";\r\nimport PostUser from \"./pages/PostUser.jsx\";\r\nimport Order from \"./pages/Order.jsx\"\r\nimport Bidding from \"./components/Bidding.jsx\";\r\nimport AdminLogin from \"./pages/AdminLogin.jsx\";\r\nimport AdminNavbar from \"./components/AdminNavbar.jsx\";\r\nimport AdminHome from \"./pages/AdminHome.jsx\";\r\nimport DeleteUser from \"./pages/DeleteUser.jsx\";\r\nimport DeleteProduct from \"./pages/DeleteProduct.jsx\";\r\nimport Statistics from \"./pages/Statistics.jsx\";\r\nimport \"./style.scss\";\r\n\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Outlet />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nconst AdminLayout = () => {\r\n  return (\r\n    <>\r\n      <AdminNavbar />\r\n      <Outlet />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: \"/\",\r\n    element: <Layout />,\r\n    children: [\r\n      {\r\n        path: \"/\",\r\n        element: <Home />,\r\n      },\r\n      {\r\n        path: \"/product/:id\",\r\n        element: <Single />,\r\n      },\r\n      {\r\n        path: \"/upload\",\r\n        element: <Post />,\r\n      },\r\n      {\r\n        path: \"/user/:id\",\r\n        element: <User />,\r\n      },\r\n      {\r\n        path: \"/change\",\r\n        element: <PostUser />,\r\n      },\r\n      {\r\n        path:\"/order/:id\",\r\n        element:<Order/>\r\n      },\r\n      {\r\n        path:\"/chat\",\r\n        element:<Chat/>\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: \"/register\",\r\n    element: <Register />,\r\n  },\r\n  {\r\n    path: \"/login\",\r\n    element: <Login />,\r\n  },\r\n  {\r\n    path: \"/admin/login\",\r\n    element: <AdminLogin />,\r\n  },\r\n  {\r\n    path: \"/admin\",\r\n    element: <AdminLayout />,\r\n    children: [\r\n      {\r\n        path: \"user\",\r\n        element: <DeleteUser />,\r\n      },\r\n      {\r\n        path: \"home\",\r\n        element: <AdminHome />,\r\n      },\r\n      {\r\n        path: \"product\",\r\n        element: <DeleteProduct />,\r\n      },\r\n      {\r\n        path:\"chat\",\r\n        element:<Chat />\r\n      },\r\n      {\r\n        path: \"statistics\",\r\n        element: <Statistics />,\r\n      },\r\n    ],\r\n  },\r\n]);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <RouterProvider router={router} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\code5200\\mini\\client\\src\\components\\Footer.jsx",[],[],["145","146","147","148","149","150"],"E:\\code5200\\mini\\client\\src\\pages\\Login.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\Register.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\Post.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\Home.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\Navbar.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\Menu.jsx",["151"],[],"E:\\code5200\\mini\\client\\src\\context\\authContext.js",[],[],"E:\\code5200\\mini\\client\\src\\pages\\Single.jsx",["152"],[],"import React, { useCallback, useContext, useEffect, useState } from 'react'\nimport Edit from \"../img/edit.png\"\nimport Delete from \"../img/delete.png\"\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport Menu from '../components/Menu'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { AuthContext } from '../context/authContext';\nimport Bidding from '../components/Bidding.jsx';\nimport Message from '../components/msgBoard.jsx';\n\nconst Single = () => {\n\n  const [product, setProduct] = useState({});\n  const [timerDuration, setTimerDuration] = useState(0);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const product_id = location.pathname.split(\"/\")[2];\n  const [status, setStatus] = useState('');\n  const { currentUser } = useContext(AuthContext);\n\n\n  const openBidding = async () => {\n    setStatus('Bidding'); // Open bidding immediately\n    // count down trying \n    const endTime = new Date();\n    endTime.setSeconds(endTime.getSeconds() + parseInt(timerDuration));\n    localStorage.setItem('endTime', endTime);\n\n    setCountdown(timerDuration);\n    // ended here\n    // setTimeout(() => {\n    //   setStatus('Ended'); // End bidding after the specified duration\n    // }, timerDuration * 1000); // Convert seconds to milliseconds\n  };\n\n  // change or break this to a use effect just check if it is sold\n  const startBidSession = async () => {\n    try {\n      const before = await axios.get(`http://34.125.1.254:8800/api/orders/before/${product_id}`);\n      if (before.data.status === '1') {\n        setStatus('Sold');\n        // get the bid session and find all the bids here\n        return\n      } else {\n        //create bid session\n        await axios.post(`http://34.125.1.254:8800/api/orders/`, {\n          user_id: currentUser.user_id,\n          time: timerDuration,\n          productId: product_id\n        });\n\n      }\n    } catch (err) {\n\n    }\n  }\n  //setting status \n  useEffect(() => {\n    const fetchStatus = async () => {\n      try {\n        console.log(\"error here 1\");\n        // 1 for sold 0 for unsold\n        const res1 = await axios.get(`http://34.125.1.254:8800/api/orders/before/${product_id}`);\n        console.log(\"status: \", res1.data.status)\n        if (res1.data.status === '1') setStatus('Sold');\n        // if not initialized to unopened\n      } catch (err) {\n        console.log(\"Error fetching data:\", err);\n      }\n    };\n    fetchStatus();\n  }, [product_id]);\n\n  // setting products\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"Fetching data for product ID:\", product_id);\n      try {\n        const res = await axios.get(`http://34.125.1.254:8800/api/products/${product_id}`);\n        setProduct(res.data);\n\n      } catch (err) {\n        console.log(\"Error fetching data:\", err);\n      }\n    };\n    fetchData();\n  }, [product_id]);\n\n\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`http://34.125.1.254:8800/api/products/${product_id}`);\n      navigate(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n\n\n  const startBiddingProcess = () => {\n    startBidSession(); // Starting the bid session\n    openBidding();     // Opening the bidding\n  };\n\n\n  const fetchStatusProcessing = useCallback(async () => {\n\n    if (status !== 'Sold' && status !== 'unopened') {\n      console.log(\"reading status\", status)\n\n      const response = await axios.get(`http://34.125.1.254:8800/api/orders/time/${product_id}`);\n      console.log(\"reading res:\", response.data.endTime);\n      if (!response.data.endTime) {\n        setStatus('unopened');\n        return;\n      }\n      const endTime = new Date(response.data.endTime);\n      const currentTime = new Date();\n      if (endTime > currentTime) {\n        if (status !== 'Bidding')\n          setStatus('Bidding');\n        return;\n      } else if (endTime < currentTime) {\n        // time ended\n        const res = await axios.get(`http://34.125.1.254:8800/api/orders/bid_in_session/${product_id}`);\n        if (res.data.bid_status === '1') {\n          setStatus('Sold');\n          await axios.post(`http://34.125.1.254:8800/api/orders/update/${product_id}`);\n          return;\n        } else if (res.data.bid_status === '0') {\n          setStatus('Ended With No biders')\n          await axios.delete(`http://34.125.1.254:8800/api/orders/${product_id}`);\n        } else {\n          console.log('No return value, check backend logic')\n        }\n      }\n    }\n  }, [status, product_id]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      fetchStatusProcessing();\n    }, 1000); // Run every second\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [fetchStatusProcessing]);\n\n  //count down \n  const [countdown, setCountdown] = useState(null);\n  const fetchEndTime = useCallback(async () => {\n    try {\n      const response = await axios.get(`http://34.125.1.254:8800/api/orders/time/${product_id}`);\n      const endTime = new Date(response.data.endTime);\n      //console.log(\"end_time:\",endTime);\n      return endTime;\n    } catch (error) {\n      console.error(\"Error fetching end time:\", error);\n      return null;\n    }\n  });\n\n  const calculateRemainingTime = (endTime) => {\n    const remainingTime = Math.floor((endTime.getTime() - new Date().getTime()) / 1000);\n    return remainingTime > 0 ? remainingTime : null;\n  };\n\n  useEffect(() => {\n    if (status !== 'Bidding') {\n      setCountdown(null);\n      return;\n    }\n    let intervalId;\n\n    const initializeCountdown = async () => {\n      const endTime = await fetchEndTime();\n      if (endTime) {\n        const remainingTime = calculateRemainingTime(endTime);\n        setCountdown(remainingTime);\n\n        intervalId = setInterval(() => {\n          const newRemainingTime = calculateRemainingTime(endTime);\n          if (newRemainingTime !== null) {\n            setCountdown(newRemainingTime);\n          } else {\n            clearInterval(intervalId);\n            // Set the status to 'Ended' here\n          }\n        }, 1000);\n      }\n    };\n\n    initializeCountdown();\n\n    return () => clearInterval(intervalId);\n  }, [fetchEndTime, status]);\n  // Render countdown if it's active\n  const renderCountdown = () => {\n    if (countdown !== null) {\n      return <p>Time remaining: {countdown} seconds</p>;\n    }\n    //setStatus('Ended')\n    return null;\n  };\n  // ended here\n  if (!product || !currentUser || !product.user_id || !currentUser.user_id) {\n    return <div>Login to see more...</div>; // or any other appropriate fallback content\n  }\n  // console.log(\"status\", status)\n  return (\n    <div className='single'>\n      <div className=\"content\">\n        <img src={product?.picture} alt='' />\n        <div className='user'>\n          <div className=\"info\">\n            <Link to={`/user/${product?.username}`}>\n              <span>Uploaded by : {product?.username}</span>\n            </Link>\n            <p>Posted {moment(product.create_time).fromNow()}</p>\n            <p>Starting at {product.price} $</p>\n          </div>\n          {currentUser.user_id === product.user_id && (\n\n            <div className='edit'>\n\n              {status !== 'Bidding' && (\n                <div className='edit'>\n                  <Link to={'/upload?edit=2'} state={product}>\n                    <img src={Edit} alt='' />\n                  </Link>\n                  <img onClick={handleDelete} src={Delete} alt='' />\n                </div>\n              )}\n\n              {/* modify this part so that a useeffect would return the status real time\n              and hence this part could check the status to decide showing or not */}\n              {status !== 'Sold' && status !== 'Bidding' && (\n                <>\n                  <input\n                    type=\"number\"\n                    placeholder=\"Enter time in seconds\"\n                    value={timerDuration}\n                    onChange={(e) => setTimerDuration(e.target.value)}\n                  />\n                  <button onClick={startBiddingProcess}>Open Bidding</button>\n                </>\n              )}\n\n            </div>\n          )}\n        </div>\n        <h1>{product.pname}</h1>\n        {product.description}\n        <div className=\"status\">Status: {status} : {renderCountdown()}</div>\n        {/* Bids Table */}\n        {status !== 'unopened' && <Bidding product_id={product?.product_id} indicator={status}\n          user_id={currentUser?.user_id} start_price={product?.price} puser={product?.user_id}\n          time={timerDuration} />}\n        <div className=\"message-section\">\n          <Message user_id={currentUser?.user_id} product_id = {product?.product_id} type = 'user' username = {currentUser?.username} />\n        </div>\n\n      </div>\n\n      <Menu cat={product.prod_id} />\n      {/* Status Indicator */}\n\n    </div>\n  )\n}\n\nexport default Single;","E:\\code5200\\mini\\client\\src\\pages\\User.jsx",["153","154"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport Edit from \"../img/edit.png\";\nimport Delete from \"../img/delete.png\";\nimport { Link, useParams, useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { AuthContext } from '../context/authContext';\nimport Message from '../components/msgBoard.jsx';\n\nconst User = () => {\n  // buyer_rate is made by buyer to seller \n  // seller rate vice versa\n  const location = useLocation();\n  const [user, setUser] = useState({});\n  const [buy, setBuy] = useState({});\n  const navigate = useNavigate();\n  const { currentUser } = useContext(AuthContext);\n  const username = location.pathname.split(\"/\")[2];\n  const [buyorder, setbuyOrder] = useState({});\n  const [sellorder, setSellOrder] = useState({});\n  const [latestReviews, setLatestReviews] = useState([]);\n  const [averageRate, setAverageRate] = useState(null);\n\n\n  const [visibility, setVisibility] = useState({\n    boughtProducts: true,\n    uploadedProducts: true,\n    orderCreated: true\n  });// State to toggle visibility\n\n  function getOrderIDByProductID(order, productId) {\n    for (let i = 0; i < order.length; i++) {\n      if (order[i].product_id === productId) {\n        return order[i].order_id;\n      }\n    }\n    return null; // Return null if no match is found\n  }\n\n  const toggleVisibility = (section) => {\n    setVisibility(prevState => ({\n      ...prevState,\n      [section]: !prevState[section]\n    }));\n  };\n\n  const getText = (html) => {\n    const doc = new DOMParser().parseFromString(html, \"text/html\")\n    return doc.body.textContent\n  }\n\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const res = await axios.get(`http://34.125.1.254:8800/api/users/${username}`);\n        setUser(res.data);\n      } catch (err) {\n        console.error(err);\n        // Redirect or handle error\n      }\n    };\n\n    fetchUser();\n  }, [username]);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const res = await axios.get(`http://34.125.1.254:8800/api/users/product/${username}`);\n        setBuy(res.data);\n      } catch (err) {\n        console.error(err);\n        // Redirect or handle error\n      }\n    };\n\n    fetchUser();\n  }, [username]);\n\n  useEffect(() => {\n    const fetchOrder = async () => {\n      try {\n        const buy_order = await axios.post(`http://34.125.1.254:8800/api/users/orderByUser/`, { name: username, userType: 'buyer' });\n        const sell_order = await axios.post(`http://34.125.1.254:8800/api/users/orderByUser/`, { name: username, userType: 'seller' });\n        setbuyOrder(buy_order.data);\n        setSellOrder(sell_order.data);\n      } catch (err) {\n        console.error(err);\n        // Redirect or handle error\n      }\n    };\n\n    fetchOrder();\n  }, [username]);\n\n  const userDetails = user.userDetails;\n  const userProducts = user.userProducts;\n\n  useEffect(() => {\n    const fetchAverageRates = async () => {\n      try {\n        const response = await axios.get(`http://34.125.1.254:8800/api/users/rate/${username}`); // Adjust the URL as needed\n        setAverageRate(response.data.average_value);\n        const reviews = await axios.get(`http://34.125.1.254:8800/api/users/reviews/${username}`);\n        setLatestReviews(reviews.data)\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // Handle error, for example, set an error state\n      }\n    };\n\n    fetchAverageRates();\n  }, [username]);\n\n\n\n  if (!userDetails || !userProducts || !buy) {\n    return <div>Loading...or have you logged in yet?</div>; // or any other loading indicator\n  }\n\n  \n\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`http://34.125.1.254:8800/api/users/${userDetails.user_id}`);\n      navigate(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className='user_page'>\n      <div className=\"content_user\">\n        {userDetails && currentUser && Array.isArray(userProducts) && Array.isArray(buy) ? (\n          <div>\n            <div className='user_info'>\n              <h2>NUID : {userDetails?.user_id}</h2>\n              <h2>\n                USER : {currentUser?.user_id === userDetails?.user_id ? userDetails?.user_name : userDetails?.nickname}\n              </h2>\n              <h2>AVG RATES AS SELLER : {averageRate}</h2>\n              {currentUser?.user_id === userDetails?.user_id && (\n                <div className='edit'>\n                  <Link to={'/change?edit=2'} state={userDetails}>\n                    <img src={Edit} alt='' />\n                  </Link>\n                  <img onClick={handleDelete} src={Delete} alt='' />\n                </div>\n              )}\n              <p>\n                Created {userDetails?.create_time ? moment(userDetails.create_time).fromNow() : ''} <br />\n              </p>\n              <div>\n                {currentUser?.user_id === userDetails?.user_id ? (\n                  <>\n                    Address: {userDetails?.address_detail}<br />\n                    State: {userDetails?.add_id}<br />\n                    Service: {userDetails?.manager_id}<br />\n                    Comments got as seller: {latestReviews.map((comment, index) => (\n                      <div key={index}>\"{comment.buyer_comment}\"</div>\n                    ))}\n                  </>\n                ) : (\n                  <>State: {userDetails?.add_id}</>\n                )}\n              </div>\n            </div>\n            <div className='products'>\n              <h1>Uploaded</h1>\n              <button onClick={() => toggleVisibility('uploadedProducts')}>\n                {visibility.uploadedProducts ? 'Hide' : 'Show'}\n              </button>\n              {visibility.uploadedProducts && userProducts.map((product_user, index) => (\n                <div className='product_user' key={product_user.product_id}>\n                  <div className='img'>\n                    <img src={product_user.picture} alt='' />\n                  </div>\n                  <div className=\"content\">\n                    {\n                      getOrderIDByProductID(sellorder, product_user.product_id) !== null ? (\n                        <Link className=\"link\" to={`/order/${getOrderIDByProductID(sellorder, product_user.product_id)}`}>\n                          <h2>Item {index + 1} : order created</h2>\n                        </Link>\n                      ) : (\n                        // Optionally, render something else when getOrderIDByProductID returns null\n                        <h2>Item {index + 1}</h2>\n                      )\n                    }\n                    <Link className=\"link\" to={`/product/${product_user.product_id}`}>\n                      <h1>{product_user.pname}</h1>\n                    </Link>\n\n                    <p>{product_user.pname} at {product_user.price}$</p>\n                    <p>Status: {getText(product_user.status)}</p>\n                  </div>\n                </div>\n              ))}\n              {currentUser?.user_id === userDetails?.user_id && (\n                <>\n                  <h1>Bought</h1>\n                  <button onClick={() => toggleVisibility('boughtProducts')}>\n                    {visibility.boughtProducts ? 'Hide' : 'Show'}\n                  </button>\n                  {visibility.boughtProducts && buy.map((product_user, index) => (\n                    <div className='product_user' key={product_user.product_id}>\n                      <div className='img'>\n                        <img src={product_user.picture} alt='' />\n                      </div>\n                      <div className=\"content\">\n                        {\n                          getOrderIDByProductID(buyorder, product_user.product_id) !== null ? (\n                            <Link className=\"link\" to={`/order/${getOrderIDByProductID(buyorder, product_user.product_id)}`}>\n                              <h2>Order {index + 1} : order created</h2>\n                            </Link>\n                          ) : (\n                            // Optionally, render something else when getOrderIDByProductID returns null\n                            <h2>Order {index + 1}</h2>\n                          )\n                        }\n                        <Link className=\"link\" to={`/product/${product_user.product_id}`}>\n                          <h1>{product_user.pname}</h1>\n                        </Link>\n                        <p>{product_user.pname} at {product_user.final_price}$</p>\n                        <p>Status: {product_user.status}</p>\n                      </div>\n                    </div>\n                  ))}\n\n                </>\n\n              )}\n              {/* the list of participated records */}\n            </div>\n          </div>\n        ) : (\n          <div>Log out...</div>\n        )}\n\n          \n      </div>\n\n    </div>\n  );\n\n}\n\nexport default User","E:\\code5200\\mini\\client\\src\\pages\\PostUser.jsx",["155","156","157","158"],[],"import axios from 'axios';\r\nimport React, { useContext, useState } from 'react'\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css'; // this is text editor\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport { AuthContext } from '../context/authContext.js'\r\n\r\nconst PostUser = () => {\r\n    const state = useLocation().state;\r\n    const [nname, setNname] = useState(state?.nickname || \"\");\r\n    const [uname, setUname] = useState(state?.user_name || \"\");\r\n    const [add, setSCode] = useState(state?.add_id || \"\");\r\n    const [address, setAdd] = useState(state?.address_detail || \"\");\r\n    const [pw, setPW] = useState();\r\n    const [email, setEmail] = useState(state?.email || \"\");\r\n    const { currentUser, logout } = useContext(AuthContext);\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const combinedFunction = () => {\r\n        handleClick();\r\n        logout();\r\n        navigate(\"/\");\r\n    };\r\n\r\n\r\n    const handleClick = async (e) => {\r\n\r\n        try {\r\n            await axios.put(`http://34.125.1.254:8800/api/users/${state.user_id}`, {\r\n                nname,\r\n                uname,\r\n                add,\r\n                address,\r\n                pw,\r\n                email,\r\n                pw\r\n            })\r\n\r\n            //navigate(\"/\")\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const allFieldsFilled = nname && uname && add && address && pw && email;\r\n\r\n    return (\r\n        <div className=\"add\">\r\n            <div className=\"content\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={nname}\r\n                    onChange={(e) => setUname(e.target.value)}\r\n\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"new password\"\r\n                    onChange={(e) => setPW(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={uname}\r\n                    onChange={(e) => setNname(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={address}\r\n                    onChange={(e) => setAdd(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={add}\r\n                    onChange={(e) => setSCode(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"menu\">\r\n                <div className=\"item\">\r\n\r\n                    {allFieldsFilled && (\r\n                        <div className=\"buttons\">\r\n                            <button onClick={combinedFunction}>Logout and Upload</button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default PostUser;","E:\\code5200\\mini\\client\\src\\pages\\Order.jsx",["159","160","161","162"],[],"import React, { useCallback, useContext, useEffect, useState } from 'react'\r\n\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Message from '../components/msgBoard.jsx';\r\nimport { AuthContext } from '../context/authContext';\r\n\r\nconst Order = () => {\r\n\r\n  const location = useLocation();\r\n  const order_id = location.pathname.split(\"/\")[2];\r\n  const { currentUser } = useContext(AuthContext);\r\n  const [orders, setOrder] = useState(null);\r\n  const [ratings, setRatings] = useState({});\r\n\r\n\r\n  \r\n\r\n  const handleRatingChange = (orderId, role, newRating) => {\r\n    const ratingKey = `${orderId}_${role}`;\r\n    setRatings(prevRatings => ({\r\n      ...prevRatings,\r\n      [ratingKey]: newRating\r\n    }));\r\n  };\r\n\r\n  const handlePublishRating = async (orderId, role) => {\r\n    const ratingKey = `${orderId}_${role}`;\r\n    const ratingValue = ratings[ratingKey];\r\n\r\n    // Validate the rating value\r\n    if (!ratingValue || ratingValue < 1 || ratingValue > 5) {\r\n      alert('Rating must be between 1 and 5.');\r\n      return;\r\n    }\r\n\r\n    // Prepare the data payload for the POST request\r\n    const data = {\r\n      order_id: orderId,\r\n      [`${role}_rate`]: ratingValue, // Dynamically set the key based on the role\r\n    };\r\n\r\n    try {\r\n      // Send a POST request to the server endpoint\r\n      const response = await axios.post(`http://34.125.1.254:8800/api/users/rates`, data);\r\n      console.log(response.data); // Handle the response as needed\r\n      alert('Rating published successfully.');\r\n      window.location.reload();\r\n\r\n      // Optionally, clear the input field after successful publishing\r\n      setRatings(prevRatings => ({\r\n        ...prevRatings,\r\n        [ratingKey]: '' // Clear the input field\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to publish rating:', error);\r\n      alert('Failed to publish rating.');\r\n    }\r\n  };\r\n\r\n  const displayRating = (rate, orderId, role, order) => {\r\n    if (rate === -1) {\r\n      const ratingKey = `${orderId}_${role}`;\r\n\r\n      if ((role === 'buyer' && currentUser.user_id === order.buyer_id) ||\r\n        (role === 'seller' && currentUser.user_id === order.seller_id)) {\r\n        return (\r\n          <>\r\n            <input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"5\"\r\n              value={ratings[ratingKey] || ''}\r\n              onChange={(e) => handleRatingChange(orderId, role, e.target.value)}\r\n              placeholder=\"Rate 1-5\"\r\n            />\r\n            <button onClick={() => handlePublishRating(orderId, role)}>Publish</button>\r\n          </>\r\n        );\r\n      } else {\r\n        return 'Unrated';\r\n      }\r\n    }\r\n    return rate;\r\n  };\r\n\r\n  const handleStatus = async (orderId, actionType) => {\r\n\r\n    try {\r\n      console.log(orderId, actionType);\r\n      const response = axios.post('http://34.125.1.254:8800/api/users/update-status', { order_id: orderId, actionType: actionType });\r\n      console.log(response.status);\r\n      if (!response.status) {\r\n        alert(`${actionType} succesfully`)\r\n        window.location.reload();\r\n        // Here you might want to update the state or inform the user of success\r\n      }\r\n    } catch (error) {\r\n      alert('Error occurred while updating status');\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  function updateOrderComments(orderId, comments, role) {\r\n    // Check which comment to update based on the role\r\n    const updatePayload = { order_id: orderId, comment: comments, role: role };\r\n\r\n    // Making an API call with axios to update the comments in the database\r\n    axios.post(`http://34.125.1.254:8800/api/users/update-comments`, updatePayload)\r\n      .then(response => {\r\n        console.log('Success:', response.data);\r\n\r\n      })\r\n      .catch(error => {\r\n        alert('Error occurred while updating status');\r\n        window.location.reload();\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchOrder = async () => {\r\n      try {\r\n        console.log(\"res\");\r\n        const res = await axios.get(`http://34.125.1.254:8800/api/users/order/${order_id}`);\r\n        const end_time = await axios.get(`http://34.125.1.254:8800/api/orders/order-end-time/${order_id}`);\r\n        \r\n        setOrder(res.data);\r\n        if (orders[0].buyer_comment !== null && orders[0].buyer_rate !== -1 && orders[0].seller_comment !== null \r\n          && orders[0].seller_rate !== -1 && end_time.data.end_time.substring(0, 4) ==='2037') {\r\n          await axios.post(`http://34.125.1.254:8800/api/orders/complete`, {order_id : order_id})\r\n          \r\n          console.log(\"order end time updated\")\r\n        }\r\n\r\n      } catch (err) {\r\n        \r\n        // Redirect or handle error\r\n      }\r\n    };\r\n\r\n    fetchOrder();\r\n  }, [order_id]);\r\n\r\n\r\n\r\n  if (!orders || !currentUser?.user_id) {\r\n    return <div>Loading...or have you logged in yet?</div>; // or any other loading indicator\r\n  };\r\n\r\n  let orderStatus = ''; // Declare orderStatus here\r\n\r\n  if (orders[0].buyer_comment !== null && orders[0].buyer_rate !== -1 && orders[0].seller_comment !== null && orders[0].seller_rate !== -1) {\r\n    orderStatus = 'Completed'; // Assign value to orderStatus\r\n  } else {\r\n    orderStatus = 'Incomplete'; // Assign value to orderStatus\r\n  }\r\n\r\n  return (\r\n    <div className=\"order-web\">\r\n      {orders.map((order, index) => (\r\n        (currentUser.user_id === order.buyer_id || currentUser.user_id === order.seller_id) ? (\r\n          <div key={index} className=\"order-card\">\r\n            <div><strong>Order ID:</strong> {order.order_id}</div>\r\n            <div><strong>Order Status:</strong> {orderStatus}</div>\r\n            <div><strong>Bid Session ID:</strong> {order.bid_session_id}</div>\r\n            <div><strong>Final Price:</strong> {order.final_price}</div>\r\n            <div><strong>Buyer ID:</strong> {order.buyer_id}</div>\r\n            <div><strong>Seller ID:</strong> {order.seller_id}</div>\r\n            <div><strong>Buyer Rate:</strong> {displayRating(order.buyer_rate, order.order_id, 'buyer', order)}</div>\r\n            <div><strong>Seller Rate:</strong> {displayRating(order.seller_rate, order.order_id, 'seller', order)}</div>\r\n            <div><strong>Ship Company:</strong> {order.company}</div>\r\n            <div><strong>Ship Status:</strong> {order.ship_status === 0 ? 'Unshipped' : 'Shipped'}</div>\r\n\r\n            {order.ship_status === 0 && currentUser.user_id === order.seller_id && (\r\n              <button onClick={() => { handleStatus(order.order_id, 'ship') }}>\r\n                Ship Hopefully You really shipped\r\n              </button>\r\n\r\n            )}\r\n            <div><strong>Pay Status:</strong> {order.pay_status === 0 ? 'Unpaid' : 'Paid'}</div>\r\n            {order.pay_status === 0 && currentUser.user_id === order.buyer_id && (\r\n              <button onClick={() => { handleStatus(order.order_id, 'pay') }} >\r\n                Pay Hopefully You really paid</button>\r\n            )}\r\n\r\n            <div><strong>Buyer Comments : </strong></div>\r\n\r\n            <div>\r\n              {order.buyer_comment || (\r\n                <form>\r\n                  {currentUser.user_id === order.buyer_id && (\r\n                    <>\r\n                      <input type=\"text\" name=\"buyerComment\" placeholder=\"Add comment\" />\r\n                      <button type=\"button\" onClick={() => {\r\n                        const comment = document.querySelector('[name=\"buyerComment\"]').value;\r\n                        updateOrderComments(order.order_id, comment, 'buyer');\r\n                        alert('Comment uploaded successfully');\r\n                        window.location.reload();\r\n                      }}>Submit</button>\r\n                    </>\r\n                  )}\r\n                </form>\r\n              )}\r\n            </div>\r\n\r\n            <div><strong>Seller Comments : </strong></div>\r\n\r\n            <div>\r\n              {order.seller_comment || (\r\n                <form>\r\n                  {currentUser.user_id === order.seller_id && (\r\n                    <>\r\n                      <input type=\"text\" name=\"sellerComment\" placeholder=\"Add comment\" />\r\n                      <button type=\"button\" onClick={() => {\r\n                        const comment = document.querySelector('[name=\"sellerComment\"]').value;\r\n                        updateOrderComments(order.order_id, comment, 'seller');\r\n                        alert('Comment uploaded successfully');\r\n                        window.location.reload();\r\n                      }}>Submit</button>\r\n                    </>\r\n                  )}\r\n                </form>\r\n              )}\r\n            </div>\r\n\r\n            <div><strong>Product:</strong> {order.pname}</div>\r\n            <div>Need help on the order? Contact your Manager here: </div>\r\n            <Message user_id = {currentUser?.user_id} product_id = {order_id} type = 'admin' />\r\n          </div>\r\n        ) : (\r\n          <div key={index} className=\"order-message\">\r\n            Only your order is visible\r\n          </div>\r\n        )\r\n      ))}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Order","E:\\code5200\\mini\\client\\src\\components\\Bidding.jsx",["163"],[],"import axios from 'axios';\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\n\r\n\r\nconst Bidding = ({ product_id, indicator, user_id, start_price, puser, time, onBiddingUpdate }) => {\r\n  // Assuming 'product_id' is an array of objects with bid details\r\n  // For example: [{ bidder: 'User1', amount: 100, date: '2023-01-01' }, ...]\r\n  const [bids, setBids] = useState([]);\r\n  const [bidAmount, setBidAmount] = useState('');\r\n  const [bidStatusMessage, setBidStatusMessage] = useState('');\r\n\r\n\r\n  const handleBidAmountChange = (event) => {\r\n    setBidAmount(event.target.value);\r\n  };\r\n\r\n  const fetchBids = useCallback(async () => {\r\n    try {\r\n      const res = await axios.get(`http://34.125.1.254:8800/api/orders/bids/${product_id}`);\r\n      setBids(res.data); // Update the state with the fetched bids\r\n    } catch (err) {\r\n      console.error('Error fetching bids:', err);\r\n    }\r\n  }, [product_id]); // product_id is a dependency\r\n\r\n  const formatBidder = (bidder) => {\r\n    // Check if the bidder string is long enough\r\n    if (bidder && bidder.length > 2) {\r\n      return `${bidder.substring(0, 2)}${'*'.repeat(bidder.length - 2)}`;\r\n    }\r\n    return bidder;\r\n  };\r\n\r\n  const formatCreateTime = (createTime) => {\r\n    // Extracting up to the minute part of the ISO string\r\n    return createTime ? createTime.substring(0, 16) : '';\r\n  };\r\n  useEffect(() => {\r\n    // Fetch bids when the component mounts\r\n    fetchBids();\r\n    // If the indicator is 'Bidding', set up polling to fetch bids every second\r\n    let intervalId;\r\n    if (indicator === 'Bidding') {\r\n      intervalId = setInterval(fetchBids, 1000); // Poll every 1 second\r\n    }\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n    };\r\n  }, [product_id, indicator, fetchBids]);\r\n\r\n  const handleBidClick = async () => {\r\n    try {\r\n      const highestBid = bids.length > 0 ? Math.max(...bids.map(bid => bid.price)) : start_price;\r\n      if (Number(bidAmount) > highestBid) {\r\n        // Handle successful bid logic\r\n        setBidStatusMessage(\"Bid successful!\");\r\n        await axios.post(`http://34.125.1.254:8800/api/orders/add`, {\r\n          bidder_id: user_id,\r\n          product_id: product_id,\r\n          bidprice: bidAmount\r\n        })\r\n      } else {\r\n        // Handle unsuccessful bid logic\r\n        setBidStatusMessage(\"Bidding unsuccessful. Bid amount is too low.\");\r\n      }\r\n    } catch (err) {\r\n      // Handle any errors\r\n      console.error(\"Error in bidding process:\", err);\r\n    }\r\n  };\r\n\r\n  const checkOrder = useCallback(async (bids) => {\r\n    try {\r\n      if (bids.length === 0) {\r\n        console.log(\"No bids available\");\r\n        return;\r\n      }\r\n      \r\n      // First GET request to check if order exists\r\n      const res = await axios.get(`http://34.125.1.254:8800/api/orders/order/${product_id}`);\r\n      console.log('Order status:', res.data.order_status);\r\n  \r\n      // Proceed only if there is no existing order\r\n      if (res.data.order_status === 'No Order') {\r\n        // Find the highest bid\r\n        const highestBid = bids.reduce((max, bid) => bid.price > max.price ? bid : max, bids[0]);\r\n        console.log('Highest bid:', highestBid);\r\n  \r\n        // Get seller ID\r\n        const sellerResponse = await axios.get(`http://34.125.1.254:8800/api/users/userByProduct/${product_id}`);\r\n        console.log('Seller ID:', sellerResponse.data.user_id);\r\n  \r\n        // POST request to create a new order\r\n        const orderResponse = await axios.post(`http://34.125.1.254:8800/api/orders/create`, {\r\n          price: highestBid.price,\r\n          buyer_id: highestBid.user_id,\r\n          bid_session_id: highestBid.bid_session_id,\r\n          seller_id: sellerResponse.data.user_id\r\n        });\r\n  \r\n        // Handle the response from order creation\r\n        console.log('Order created:', orderResponse.data);\r\n        // Return or handle the response as needed\r\n      } else {\r\n        return \r\n      }\r\n    } catch (err) {\r\n      console.error('Error in checkOrder:', err);\r\n      // Handle the error appropriately\r\n    }\r\n  }, [product_id]);\r\n\r\n  useEffect(() => {\r\n    // Check and call createOrder only when product_id changes\r\n    if (indicator === \"Sold\") {\r\n      checkOrder(bids)\r\n    }\r\n  }, [indicator, checkOrder]); \r\n\r\n  return (\r\n    <div style={{ padding: '20px', backgroundColor: '#e6f5f4', borderRadius: '10px', boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)' }} className=\"bids-table\">\r\n\r\n      <h3>Bids: </h3>\r\n      <table style={{ width: '100%', marginTop: '20px', borderCollapse: 'collapse' }}>\r\n        <thead style={{ backgroundColor: '#007bff', color: 'white' }}>\r\n          <tr>\r\n            <th style={{ padding: '8px 10px', textAlign: 'left' }}>Bidder</th>\r\n            <th style={{ padding: '8px 10px', textAlign: 'left' }}>Amount</th>\r\n            <th style={{ padding: '8px 10px', textAlign: 'left' }}>Date</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {bids.map((bid, index) => (\r\n            <tr key={index}>\r\n              <td style={{ padding: '8px 10px', textAlign: 'left' }}>{formatBidder(bid.user_id)}</td>\r\n              <td style={{ padding: '10px 10px', textAlign: 'left' }}> ${bid.price}</td>\r\n              <td style={{ padding: '10px 10px', textAlign: 'left' }}>{formatCreateTime(bid.create_time)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {indicator === 'Bidding' && (\r\n        <div style={{ marginTop: '20px' }}>\r\n\r\n          {\r\n            user_id !== puser && (\r\n              <>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"Bid amount\"\r\n                  onChange={handleBidAmountChange}\r\n                  style={{ padding: '10px', marginRight: '10px', borderRadius: '5px' }}\r\n                />\r\n                <button\r\n                  onClick={handleBidClick}\r\n                  style={{ padding: '10px 20px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px' }}\r\n                >\r\n                  Place Bid\r\n                </button>\r\n                {bidStatusMessage && <p>{bidStatusMessage}</p>}\r\n              </>\r\n            )\r\n          }\r\n\r\n        </div>\r\n      )}\r\n      {}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bidding;\r\n","E:\\code5200\\mini\\client\\src\\pages\\Statistics.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\AdminLogin.jsx",["164"],[],"import React, { useContext, useState } from \"react\";\r\n\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nconst AdminLogin = () => {\r\n  const [inputs, setInputs] = useState({\r\n    password: \"\",\r\n    adminName: \"\",\r\n  });\r\n  const [err, setError] = useState(null);\r\n  const navigate = useNavigate(); // this isn't working , and I don't know why yet\r\n  const { adminLogin } = useContext(AuthContext);\r\n\r\n  const handleChange = (e) => {\r\n    setInputs((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await adminLogin(inputs);\r\n      navigate(\"/admin/home\");\r\n    } catch (err) {\r\n      setError(err.response.data);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"auth\">\r\n      <h1>Admin Login</h1>\r\n      <form>\r\n        <input\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"admin name\"\r\n          name=\"adminName\"\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          required\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          onChange={handleChange}\r\n        />\r\n        <button onClick={handleSubmit}>Login</button>\r\n        {err && <p>{err} </p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLogin;\r\n","E:\\code5200\\mini\\client\\src\\pages\\DeleteUser.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\DeleteProduct.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\AdminNavbar.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\MixedChart.jsx",["165"],[],"import React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport {\n  Chart as ChartJS,\n  BarController,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  BarController,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\nexport const MixedChart = (props) => {\n  console.log(\"props\", props);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        type: \"line\",\n        label: \"Aggregate Amount\",\n        data: [],\n        borderColor: \"rgb(54, 162, 235)\",\n        borderWidth: 2,\n      },\n      {\n        type: \"bar\",\n        label: \"Increased Amount\",\n        data: [],\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      },\n    ],\n    options: {\n      legend: {\n        display: true,\n      },\n    },\n  });\n\n  useEffect(() => {\n    axios\n      .get( `http://34.125.1.254:8800/api/admin/data/${props.category}/${props.year}`\n      )\n      .then((response) => {\n        const data = response.data; // Use response.data to access the JSON data\n        setChartData((prev) => ({\n          ...prev,\n          labels: data.labels,\n          datasets: prev.datasets.map((dataset, index) => {\n            if (index === 0) {\n              // Assuming the first dataset is the line chart\n              return { ...dataset, data: data.aggregate };\n            } else if (index === 1) {\n              // Assuming the second dataset is the bar chart\n              return { ...dataset, data: data.increasing };\n            }\n            return dataset;\n          }),\n        }));\n      })\n      .catch((error) => console.error(\"Error fetching data: \", error));\n  }, [props.category, props.year]);\n\n  return (\n    <div>\n      <Line data={chartData} />\n      <div className=\"chartExplanation\">\n        <div className=\"chartExplanationItem\">\n          <span className=\"lineRepresentation\"></span>\n          <strong>Total {props.category}</strong>\n        </div>\n        <div className=\"chartExplanationItem\">\n          <span className=\"barRepresentation\"></span>\n          <strong>New {props.category} in the month</strong>\n        </div>\n      </div>\n    </div>\n  );\n};\n","E:\\code5200\\mini\\client\\src\\pages\\AdminHome.jsx",[],[],"E:\\code5200\\mini\\client\\src\\pages\\Chat.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\DynamicTable.jsx",[],[],"E:\\code5200\\mini\\client\\src\\components\\msgBoard.jsx",["166","167","168","169"],[],"import React, { useEffect, useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/' // Import the Quill stylesheet\r\n\r\nimport axios from 'axios';\r\n\r\nconst Message = ({ user_id, type, product_id, username }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const [order_id, setOrderId] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch messages from the database\r\n    // This is a placeholder function, replace with your actual data fetching logic\r\n    const fetchMessages = async () => {\r\n      try {\r\n        if (user_id === '' && type === '' && product_id === '') {\r\n          return;\r\n        }\r\n        if (type === 'toUser') {\r\n          const res = await axios.post(`http://34.125.1.254:8800/api/admin/adminmsg`, { admin_id: user_id })\r\n          console.log(res);\r\n          setMessages(res.data)\r\n          return;\r\n        }\r\n        const response = await axios.post(`http://34.125.1.254:8800/api/admin/messages`, { type: type, product_id: product_id }); // Replace with your API endpoint\r\n        const data = response.data;\r\n        setMessages(data);\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check if the message is empty\r\n    if (value.trim() === '') {\r\n      alert('Please enter a message before submitting.');\r\n      return; // Stop the function if the message is empty\r\n    }\r\n\r\n    try {\r\n      // Send a POST request to the server\r\n      if (type === 'user') {\r\n        const response = await axios.post(`http://34.125.1.254:8800/api/admin/postmsg`, {\r\n          type: type,\r\n          sender_id: user_id,\r\n          msg: value,\r\n          product_id: product_id\r\n        });\r\n      } else if (type === 'admin') {\r\n        const response = await axios.post(`http://34.125.1.254:8800/api/admin/postmsg`, {\r\n          type: type,\r\n          sender_id: user_id,\r\n          msg: value,\r\n          order_id: product_id\r\n        });\r\n      } else if (type === 'toUser') {\r\n        const response = await axios.post(`http://34.125.1.254:8800/api/admin/postadmin`, {\r\n          admin_id: user_id,\r\n          sender_id: userId,\r\n          order_id: order_id,\r\n          msg: processText(value)\r\n\r\n        })\r\n      }\r\n      // Clear the editor after successful submission\r\n      setValue('');\r\n\r\n      // Optionally, provide feedback to the user\r\n      alert('Message sent successfully!');\r\n      window.location.reload();\r\n      // Or you can update the state/UI based on the successful submission\r\n    } catch (error) {\r\n      // Handle errors (e.g., network issues, server errors)\r\n      console.error('Error sending message:', error);\r\n      alert('Failed to send message. Please try again.');\r\n    }\r\n  };\r\n\r\n  function processText(text) {\r\n    return text.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Conditional Message Display */}\r\n      {\r\n        type === 'user' && (\r\n          <div style={{ marginBottom: '10px' }}>\r\n            <p style={{ color: 'blue' }}>Chat Board, do be polite ok?</p>\r\n            {messages && messages.length === 0 && (\r\n              <p style={{ color: 'blue' }}>\r\n                You don't have any messages at the moment, post a message?\r\n              </p>\r\n            )}\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {/* Messages Table */}\r\n      {messages && messages.length > 0 && (\r\n        <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '10px' }}>\r\n          <tbody>\r\n            {messages.map((msg, index) => (\r\n              <tr key={index} style={{ borderBottom: '1px solid #ddd', backgroundColor: index % 2 === 0 ? '#f9f9f9' : 'white' }}>\r\n                {type === 'toUser' && (\r\n                  <>\r\n                    <td style={{ padding: '8px', textAlign: 'left', color: 'blue' }}>\r\n                      {!msg.message.includes('Regarding') && `${msg.sender_id} : `}\r\n                      {processText(msg.message)} <br />\r\n                      FOR ORDER : {msg.order_id}\r\n                    </td>\r\n                  </>\r\n                )}\r\n                {type === 'admin' &&  (\r\n                  <td style={{ padding: '8px', textAlign: 'left', color: 'blue' }}>\r\n                    {msg.message.startsWith('Regarding') ? 'Manager : ' : `${msg.sender_id} : `}\r\n                    {processText(msg.message)}\r\n                  </td>\r\n                )}\r\n                {type === 'user' &&  (\r\n                  <td style={{ padding: '8px', textAlign: 'left', color: 'blue' }}>\r\n                    {`${msg.username}: `}\r\n                    {processText(msg.message)}\r\n                  </td>\r\n                )}\r\n\r\n                {/* Add other columns if needed */}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      {/* Message Input Form */}\r\n      {type === 'toUser' && messages && (\r\n        <>\r\n          <p style={{ color: 'blue', marginBottom: '5px' }}>Add your comments!</p>\r\n\r\n          <form onSubmit={handleSubmit}>\r\n            <div style={{ display: 'flex', marginBottom: '10px' }}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter replying user id\"\r\n                style={{ flex: 1, marginRight: '5px', padding: '5px' }}\r\n                // Assuming you have a state variable and setter for userId\r\n                value={userId}\r\n                onChange={(e) => setUserId(e.target.value)}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter order number\"\r\n                style={{ flex: 1, padding: '5px' }}\r\n                // Assuming you have a state variable and setter for orderId\r\n                value={order_id}\r\n                onChange={(e) => setOrderId(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <ReactQuill\r\n              className=\"editor\"\r\n              theme=\"snow\"\r\n              value={value}\r\n              onChange={setValue}\r\n            />\r\n            <button type=\"submit\" style={{ marginTop: '10px', backgroundColor: 'blue', color: 'white', border: 'none', padding: '10px 15px', borderRadius: '5px', cursor: 'pointer' }}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n      {type !== 'toUser' && (\r\n        <>\r\n          <p style={{ color: 'blue', marginBottom: '5px' }}>Add your comments!</p>\r\n          <form onSubmit={handleSubmit}>\r\n            <ReactQuill\r\n              className=\"editor\"\r\n              theme=\"snow\"\r\n              value={value}\r\n              onChange={setValue}\r\n            />\r\n            <button type=\"submit\" style={{ marginTop: '10px', backgroundColor: 'blue', color: 'white', border: 'none', padding: '10px 15px', borderRadius: '5px', cursor: 'pointer' }}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":15},{"ruleId":"170","replacedBy":"186"},{"ruleId":"172","replacedBy":"187"},{"ruleId":"174","replacedBy":"188"},{"ruleId":"176","replacedBy":"189"},{"ruleId":"178","replacedBy":"190"},{"ruleId":"180","replacedBy":"191"},{"ruleId":"182","severity":1,"message":"192","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":11},{"ruleId":"193","severity":1,"message":"194","line":153,"column":24,"nodeType":"184","endLine":153,"endColumn":35},{"ruleId":"182","severity":1,"message":"195","line":4,"column":16,"nodeType":"184","messageId":"185","endLine":4,"endColumn":25},{"ruleId":"182","severity":1,"message":"196","line":8,"column":8,"nodeType":"184","messageId":"185","endLine":8,"endColumn":15},{"ruleId":"182","severity":1,"message":"197","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":18},{"ruleId":"182","severity":1,"message":"198","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":14},{"ruleId":"182","severity":1,"message":"199","line":17,"column":13,"nodeType":"184","messageId":"185","endLine":17,"endColumn":24},{"ruleId":"200","severity":1,"message":"201","line":38,"column":17,"nodeType":"202","messageId":"203","endLine":38,"endColumn":19},{"ruleId":"182","severity":1,"message":"204","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":28},{"ruleId":"182","severity":1,"message":"205","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":14},{"ruleId":"182","severity":1,"message":"206","line":3,"column":29,"nodeType":"184","messageId":"185","endLine":3,"endColumn":40},{"ruleId":"193","severity":1,"message":"207","line":142,"column":6,"nodeType":"208","endLine":142,"endColumn":16,"suggestions":"209"},{"ruleId":"193","severity":1,"message":"210","line":120,"column":6,"nodeType":"208","endLine":120,"endColumn":29,"suggestions":"211"},{"ruleId":"182","severity":1,"message":"205","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":14},{"ruleId":"182","severity":1,"message":"212","line":2,"column":16,"nodeType":"184","messageId":"185","endLine":2,"endColumn":19},{"ruleId":"193","severity":1,"message":"213","line":39,"column":6,"nodeType":"208","endLine":39,"endColumn":8,"suggestions":"214"},{"ruleId":"182","severity":1,"message":"215","line":53,"column":15,"nodeType":"184","messageId":"185","endLine":53,"endColumn":23},{"ruleId":"182","severity":1,"message":"215","line":60,"column":15,"nodeType":"184","messageId":"185","endLine":60,"endColumn":23},{"ruleId":"182","severity":1,"message":"215","line":67,"column":15,"nodeType":"184","messageId":"185","endLine":67,"endColumn":23},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["216"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'Bidding' is defined but never used.","Identifier","unusedVar",[],[],[],["216"],[],[],"'img' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useParams' is defined but never used.","'Message' is defined but never used.","'ReactQuill' is defined but never used.","'moment' is defined but never used.","'currentUser' is assigned a value but never used.","no-dupe-keys","Duplicate key 'pw'.","ObjectExpression","unexpected","'useCallback' is defined but never used.","'Link' is defined but never used.","'useNavigate' is defined but never used.","React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.","ArrayExpression",["217"],"React Hook useEffect has a missing dependency: 'bids'. Either include it or remove the dependency array.",["218"],"'Bar' is defined but never used.","React Hook useEffect has missing dependencies: 'product_id', 'type', and 'user_id'. Either include them or remove the dependency array.",["219"],"'response' is assigned a value but never used.","no-object-constructor",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [order_id, orders]",{"range":"226","text":"227"},"Update the dependencies array to be: [indicator, checkOrder, bids]",{"range":"228","text":"229"},"Update the dependencies array to be: [product_id, type, user_id]",{"range":"230","text":"231"},[4743,4753],"[order_id, orders]",[4262,4285],"[indicator, checkOrder, bids]",[1329,1331],"[product_id, type, user_id]"]